<template>
  <TabHeaders :navTitle="navTitle" :leftArrow="false" :lavelMuch="true" />

  <CellGroup inset style="margin: 10px">
    <Image width="100%" height="40vh" :src="image" />
  </CellGroup>

  <CellGroup inset style="margin: 10px">
    <Cell title="启用">
      <template #right-icon>
        <Checkbox
          v-model="checked"
          :disabled="StateDisabled"
          shape="square"
          icon-size="15px"
        ></Checkbox>
      </template>
    </Cell>
  </CellGroup>

  <CellGroup inset style="margin: 10px">
    <Cell title="分辨率" is-link :value="deviceCamera" @click="showPickerFn" />
  </CellGroup>

  <CellGroup inset style="margin: 10px">
    <Cell title="水平镜像">
      <template #right-icon>
        <Checkbox v-model="checked2" shape="square" icon-size="15px"></Checkbox>
      </template>
    </Cell>
  </CellGroup>

  <CellGroup inset style="margin: 10px">
    <Cell title="垂直镜像">
      <template #right-icon>
        <Checkbox v-model="checked3" shape="square" icon-size="15px"></Checkbox>
      </template>
    </Cell>
  </CellGroup>

  <Popup round v-model:show="showPicker" position="bottom">
    <Picker
      title="设置分辨率"
      :columns="columns"
      @cancel="showPicker = false"
      :default-index="deviceColorIndex"
      @confirm="onConfirm"
    />
  </Popup>

  <StickyBottom @BottomSubmit="BottomSubmit" @BottomSearch="BottomSearch" />
</template>

<script setup>
import TabHeaders from "@/components/tab.vue";
import StickyBottom from "@/components/stickyBottom.vue";
import { CellGroup, Cell, Checkbox, Toast, Image, Popup, Picker } from "vant"; // Checkbox
import { defineComponent, ref, onMounted } from "vue";
import { useRoute } from "vue-router";
import { postAN } from "@/utlis/AdApi";
// import { getQueryString } from "@/utlis/QueryStr";

let route = useRoute();
const query = route.query;
const index = +query.index;
const item = query.e;
let allCmd = query.allCmd;
let nowCmd = query.nowCmd;

// 标题
const navTitle = ref("摄像头 " + (index + 1) + " 设置");
const defineColumns = [
  "960H",
  "720P",
  "1080P",
  "TVI 720",
  "TVI 1080P",
  "CVI 720P",
  "CVI 1080P",
  "960P",
];

const columns = ref([]);
const checked = ref(1); // 启用
const checked2 = ref(1); // 水平
const checked3 = ref(1); // 垂直
const StateDisabled = ref(true);
const deviceColorIndex = ref(1);
const showPicker = ref(false); // 弹出层是否显示
const deviceCamera = ref("");
const image = ref("");
const mirrorCmd = ref(""); // 镜像设置指令

// 设置选中的分辨率
const onConfirm = (e) => {
  deviceColorIndex.value = columns.value.indexOf(e);
  deviceCamera.value = e;
  showPicker.value = false;
};

const showPickerFn = () => {
  if (StateDisabled.value) {
    Toast("该摄像头不支持设置分辨率");
    return false;
  }
  showPicker.value = true;
};

// 保存
const BottomSubmit = () => {
  var cmds = [];
  for (var i = 0; i < allCmd.length; i++) {
    if (i > 0) {
      var item = allCmd[i].split(":")[0];
      var cmd = item.split("#");
      cmds.push(cmd);
    }
  }
  // 获取到分辨率，在分辨率==0时为不启用
  if (deviceCamera.value != "") {
    var selectCamera = defineColumns.indexOf(deviceCamera.value);
    cmds[index][1] = selectCamera;
  }
  cmds = nowCmd + "," + allCmd[0] + "," + cmds.toString(); // 获取到摄像头设置的指令
  postAN.ANsendSetting(cmds);
  //   console.log(mirrorCmd.value);

  let mirror = mirrorCmd.value.split(",");
  var nowMirror = mirror[index + 1].split("*");
  nowMirror[1] = +checked2.value;
  nowMirror[2] = +checked3.value;
  nowMirror.join(",");
  mirror[index + 1] = nowMirror;
  var cmdsMirror = mirror.join("!").replace(/,/g, "*").replace(/!/g, ",");
  //   alert(cmdsMirror); // 获取到镜像设置
  postAN.ANsendSetting(cmdsMirror);

  return false;
};
// 查询
const BottomSearch = () => {
  Toast("查询指令下发成功");
  androidStatus_fn();

  //   postAN.ANSend(nowCmd.value);
};

// 解析出支持设置的分辨率
const splitStr = () => {
  var itemArr = item.split("#"); // 获取到是否启用
  checked.value = itemArr[0]; // 启用
  var cameraArr = itemArr[1].split(":"); // 分辨率
  if (cameraArr[0] != 0) {
    deviceCamera.value = defineColumns[cameraArr[0]]; // 获取到当前选择的分辨率
    var cameraArr2 = cameraArr[1].split("*");
    var cameraItems = [];
    for (var j = 0; j < cameraArr2.length; j++) {
      cameraItems.push(defineColumns[cameraArr2[j]]);
    }
    columns.value = cameraItems; // 显示 支持设置的分辨率
    deviceColorIndex.value = cameraItems.indexOf(deviceCamera.value); // 获取到分辨率的索引
    StateDisabled.value = false;
  } else {
    StateDisabled.value = true;
  }
};

// 命名空间
defineComponent({
  name: "yunweibao-CameraInfo",
});

// -------------------------------------------------------------------
// 安卓回调函数
const callJSResult = (str) => {
  var cmds = str.split(";")[0];
  mirrorCmd.value = cmds;
  // 获取到 镜像设置
  var cmdArr = cmds.split(",").splice(1);
  let nowMirror = cmdArr[index].split("*");
  checked2.value = +nowMirror[1];
  checked3.value = +nowMirror[2];
  splitStr();
};
// 安卓图片的回调函数
const callJSResult_IMG = (state, data) => {
  if (state == 0) {
    Toast.success(state + index);
    return false;
  } else {
    image.value = data;
  }
};
// 安卓成功失败回调
const callJSResult_Status = (str) => {
  if (str.indexOf("Success") !== -1) {
    Toast.success("下发成功");
  } else {
    Toast.fail("下发失败");
  }
};

// 向安卓发送指令
const androidStatus_fn = () => {
  postAN.ANsendSelectPhoto(index);
  postAN.ANSend("$MIRROR");
};

onMounted(() => {
  window.callJSResult = callJSResult;
  window.callJSResult_Status = callJSResult_Status;
  window.callJSResult_IMG = callJSResult_IMG;
  androidStatus_fn();
  splitStr();
});
</script>

<style>
.images {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  /* background: red; */
  width: 93%;
  margin: auto;
}
</style>
