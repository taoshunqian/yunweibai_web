<template>
  <TabHeaders :navTitle="navTitle" :leftArrow="false" />

  <CellGroup inset style="margin-top: 10px" v-for="(item,index) in getResultCmds" :key="index">
    <Collapse v-model="activeNames">
      <CollapseItem :title=" $t('platformStatus.title[0]') + (index + 1)" :name=" '' + (index + 1) ">
        <Cell :title="$t('platformStatus.title[1]')" :value="item[1]"></Cell>
        <Cell :title="$t('platformStatus.title[2]')" :value="item[2]"></Cell>
        <Cell :title="$t('platformStatus.title[3]')" :value="filterStartState(item[3])"></Cell>
        <Cell :title="$t('platformStatus.title[4]')" :value="filterLogonState(item[4])"></Cell>

        <Cell :title="$t('platformStatus.title[5]')" :value="columns2[item[5]]"></Cell>
        <Cell :title="$t('platformStatus.title[6]')" :value="columns3[item[6]]"></Cell>
        <Cell :title="$t('platformStatus.title[7]')" :value="columns4[item[7]]"></Cell>
      </CollapseItem>
    </Collapse>
  </CellGroup>

  <!-- <StickyBottom /> -->
  
</template>

<script setup>
import TabHeaders from "@/components/tab.vue";
// import StickyBottom from "@/components/stickyBottom.vue";
import { Collapse, CollapseItem, CellGroup,Cell,Toast } from "vant"; // Checkbox
import { defineComponent, ref, onMounted,inject } from "vue";
import { postAN } from "@/utlis/AdApi";
import { getQueryString } from "@/utlis/QueryStr";

const { lang } = inject("lang");
const International = ref(lang.value);
console.log(International)

import { useI18n } from "vue-i18n";
const { t } = useI18n();
const i8nColumns3 = t('platformStatus.columns3');
const i8nColumns4 = t('platformStatus.columns4');

// 标题
const navTitle = ref(t("platformStatus.navTitle"));
const activeNames = ref(["1"]);
const sendNum = ref(0);
const resultAll = ref("");
const columns2 = ref(["JT808-2013", "JT808-2019", "JT808-2011", "JT905"]);
const columns3 = ref(i8nColumns3.split(","));
const columns4 = ref(i8nColumns4.split(","));
// const cmds = ref(["$JTSVR2,","$JTSVR3,","$JTSVR4,","$JTSVR5,","$NETSTATE"])
const getResultCmds = ref([]);

defineComponent({
  name: "yunweibao-SettingsIP",
});

// const settingServe = (e,index) => {
//   console.log(e);
//   router.push({
//     path: "/ServeInfo",
//     query: {
//       item: e,
//       index
//     },
//   });
// };

function filterStartState(name) {
  let ti = "";
  
  switch (name) {
    case "1":
      ti = t("platformSettings.serveState[0]");
      break;
    case "0":
      ti = t("platformSettings.serveState[1]");
      break;
    default:
      ti = t("platformSettings.serveState[2]");
  }
  return ti;
}

function filterLogonState(name) {
  let ti = "";
  switch (name) {
    case "1":
      ti =  t("platformSettings.logonState[0]");
      break;
    case "0":
      ti = t("platformSettings.logonState[1]");
      break;
    default:
      ti = t("platformSettings.logonState[2]");
  }
  return ti;
}


// -------------------------------------------------------------------
// 安卓回调函数

const callJSResult = (str) => {
  console.log(str);
  var cmds = str.split(";")[0];
  sendNum.value++;
  if (sendNum.value == 6) {
    var cmd = [];
    console.log(resultAll.value);
    var items = resultAll.value.split("!");
    for (var i = 0; i < items.length; i++) {
      var item = items[i].split(",");
      cmd.push(item);
    }
    getResultCmds.value = cmd;
    return false;
  }
  resultAll.value += cmds + "!";
};
// 安卓成功失败回调
const callJSResult_Status = (str) => {
  if (str.indexOf("Success") !== -1) {
    Toast.success(t("toast[1]"));
  } else {
    Toast.fail(t("toast[2]"));
  }
};

// 向安卓发送指令
const androidStatus_fn = () => {
  var param = getQueryString("param").split("@"); // 解析出指令
  // alert(param);
  if (param[7] != undefined) {
    return false;
  }
  postAN.ANSend(param[1]);
  postAN.ANSend("$JTSVR2,");
  postAN.ANSend("$JTSVR3,");
  postAN.ANSend("$JTSVR4,");
  postAN.ANSend("$JTSVR5,");
  postAN.ANSend("$NETSTATE");
};

onMounted(() => {
  window.callJSResult = callJSResult;
  window.callJSResult_Status = callJSResult_Status;
  androidStatus_fn();
});

</script>

<style scoped>
</style>
