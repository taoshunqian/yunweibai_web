<template>
  <TabHeaders :navTitle="navTitle" :leftArrow="false" />

  <CellGroup
    inset
    style="margin: 10px"
    class="cellGroup"
    v-for="(item, index) in getResultCmds"
    :key="index"
    @click="settingServe(item,index)"
  >
    <Cell>
      <template #title>
        <!-- {{ item[4] }} -->
        <label style="margin-right: 10px; font-size: 13px"
          >服务器: {{ index + 1 }}</label
        >
        <p style="margin: 0px; padding-top: 5px; font-size: 13px">
          服务器IP: {{ item[1] }}
        </p>
        <p style="margin: 0px; padding-top: 5px; font-size: 13px">
          服务器端口: {{ item[2] }}
        </p>
      </template>

      <template #right-icon>
        <div style="font-size: 13px">
          <p style="margin: 0px">服务器状态： {{ filterServeState(item[3]) }}</p>
          <p style="margin-top: 5px">
            设备状态:  <span style="color: #5fb878">{{ filterDeviceState(item[4]) }}</span>
          </p>
        </div>
      </template>
    </Cell>
  </CellGroup>

  
</template>

<script setup>
import TabHeaders from "@/components/tab.vue";
// import StickyBottom from "@/components/stickyBottom.vue";
import { CellGroup, Cell, Toast } from "vant"; // Checkbox
import { defineComponent, ref, onMounted } from "vue";
import router from "@/router";
import { postAN } from "@/utlis/AdApi";
import { getQueryString } from "@/utlis/QueryStr";

// 标题
const navTitle = ref("平台配置");
const sendNum = ref(0);
const resultAll = ref("");
// const cmds = ref(["$JTSVR2,","$JTSVR3,","$JTSVR4,","$JTSVR5,","$NETSTATE"])
const getResultCmds = ref([]);

const settingServe = (e,index) => {
  console.log(e);
  router.push({
    path: "/ServeInfo",
    query: {
      item: e,
      index
    },
  });
};

function filterServeState(name) {
  let ti = "";
  switch (name) {
    case "1":
      ti = "启用";
      break;
    case "0":
      ti = "不启用";
      break;
    default:
      ti = "未知";
  }
  return ti;
}

function filterDeviceState(name) {
  let ti = "";
  switch (name) {
    case "1":
      ti = "启用";
      break;
    case "0":
      ti = "不启用";
      break;
    default:
      ti = "未知";
  }
  return ti;
}

defineComponent({
  name: "yunweibao-SettingsIP",
});

// -------------------------------------------------------------------
// 安卓回调函数
const callJSResult = (str) => {
  var cmds = str.split(";")[0];
  sendNum.value++;
  if (sendNum.value == 6) {
    var cmd = [];
    console.log(resultAll.value);
    var items = resultAll.value.split("!");
    for (var i = 0; i < items.length; i++) {
      var item = items[i].split(",");
      cmd.push(item);
    }
    getResultCmds.value = cmd;
    return false;
  }
  resultAll.value += cmds + "!";
};
// 安卓成功失败回调
const callJSResult_Status = (str) => {
  if (str.indexOf("Success") !== -1) {
    Toast.success("下发成功");
  } else {
    Toast.fail("下发失败");
  }
};

// 向安卓发送指令
const androidStatus_fn = () => {
  var param = getQueryString("param").split("@"); // 解析出指令
  if (param[7] != undefined) {
    return false;
  }
  postAN.ANSend(param[1]);
  postAN.ANSend("$JTSVR2,");
  postAN.ANSend("$JTSVR3,");
  postAN.ANSend("$JTSVR4,");
  postAN.ANSend("$JTSVR5,");
  postAN.ANSend("$NETSTATE");
};

onMounted(() => {
  window.callJSResult = callJSResult;
  window.callJSResult_Status = callJSResult_Status;
  androidStatus_fn();
});
</script>

<style scoped>
</style>
