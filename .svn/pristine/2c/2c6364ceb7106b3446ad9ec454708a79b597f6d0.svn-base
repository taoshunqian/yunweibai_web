<template>
  <TabHeaders :navTitle="navTitle" :leftArrow="false" />
  <!-- 循环覆盖 -->
  <CellGroup inset style="margin-top: 10px">
    <Cell :value="$t('SessionSettings.template[0]')" is-link>
      <template #right-icon>
        <CheckboxGroup v-model="coverInfoChecked" direction="horizontal">
          <Checkbox name="1" shape="square">{{
            $t("SessionSettings.template[1]")
          }}</Checkbox>
          <Checkbox name="2" shape="square">{{
            $t("SessionSettings.template[2]")
          }}</Checkbox>
        </CheckboxGroup>
      </template>
    </Cell>
  </CellGroup>

  <!-- 存储信息 -->
  <CellGroup
    inset
    style="margin-top: 10px"
    v-for="(item, index) in sessionInfo"
    :key="index"
  >
    <Cell :value="item[0]" is-link>
      <template #right-icon>
        <RadioGroup v-model="sessionInfoChecked[index]" direction="horizontal">
          <Radio name="1" @click="checkboxChange(item, index, 1)">{{
            $t("SessionSettings.template[3]")
          }}</Radio>
          <Radio name="2" @click="checkboxChange(item, index, 2)">{{
            $t("SessionSettings.template[4]")
          }}</Radio>
        </RadioGroup>
      </template>
    </Cell>
  </CellGroup>

  <StickyBottom @BottomSubmit="BottomSubmit" @BottomSearch="BottomSearch" />
</template>


<script setup>
/*
报警器 和 刷卡器 共用
*/

import {
  Cell,
  RadioGroup,
  Radio,
  CellGroup,
  Toast,
  Checkbox,
  CheckboxGroup,
} from "vant"; // Checkbox

import { defineComponent, ref, onMounted } from "vue";
import mixins from "@/mixins/index.js";
let {
  t,
  postAN,
  TabHeaders,
  StickyBottom,
  callJSResult_Status,
  getDeviceVersion,
} = mixins();
const navTitle = ref(t("SessionSettings.navTitle"));

const coverInfoChecked = ref([]);
const sessionInfoChecked = ref([]);
const sessionInfo = ref([]);
const coverInfo = ref([]);
let supportDevice = [];
const lastTime = ref("");
const deviceVersion = ref(0);
const allDevice = ["HDD/HDD1", "HDD2", "SD/SD1", "SD2", "EXT"];

const checkboxChange = (event, index, clickVal) => {
  if (lastTime.value != clickVal) {
    lastTime.value = clickVal;
  } else {
    sessionInfoChecked.value[index] = -1;
    lastTime.value = -1;
  }
};

const BottomSubmit = async () => {
  var cheacked = coverInfoChecked.value;
  var cmdArr = [...sessionInfoChecked.value];
  var circle = [];
  var cmd = "";
  // // 主码流
  if (cheacked.includes("1")) {
    circle[0] = "1";
  } else {
    circle[0] = "0";
  }
  // 子码流
  if (cheacked.includes("2")) {
    circle[1] = "1";
  } else {
    circle[1] = "0";
  }
  cmd += `CIRCLE*${circle.join("*")}`; // 循环覆盖

  if (deviceVersion.value <= 11) {
    console.log("低版本");
    var info = [];
    cmdArr.forEach((item, index) => {
      if (item == 1) {
        info.push(supportDevice[index] + "*1*0");
      } else if (item == 2) {
        info.push(supportDevice[index] + "*0*1");
      } else {
        info.push(supportDevice[index] + "*0*0");
      }
    });

    var session = allDevice;
    var data = [];
    for (var i = 0; i < session.length; i++) {
      var it = getHideSession(info, session[i]);
      if (it != "") {
        data.push(it[0]);
      } else {
        data.push(session[i] + "*0*0");
      }
    }
    data.unshift(cmd);
    var mainArr = [];
    var subArr = [];
    for (var j = 0; j < data.length; j++) {
      var item = data[j].split("*");
      mainArr.push(item[1]);
      subArr.push(item[2]);
    }
    var cmdStr = mainArr.join(",") + "," + subArr.join(",");
    cmd = cmdStr;
  } else {
    cmd += ",";
    cmdArr.forEach((item, index) => {
      if (item == 1) {
        cmd += supportDevice[index] + "*1*0,";
      } else if (item == 2) {
        cmd += supportDevice[index] + "*0*1,";
      } else {
        cmd += supportDevice[index] + "*0*0,";
      }
    });
  }
  var cmds = `$STORAGE,${cmd}`;
  console.log("下发" + cmds);
  postAN.ANsendSetting(cmds);
  return false;
};

const getHideSession = (info, session) => {
  var value = "";
  var arr = session.split("/");
  for (var j = 0; j < info.length; j++) {
    var item = info[j].split("*");
    var index = arr.indexOf(item[0]);
    if (index !== -1) {
      value = [`${arr[index]}*${item[1]}*${item[2]}`, j];
    }
  }
  return value;
};

// 查询
const BottomSearch = () => {
  Toast(t("toast[0]"));
  androidStatus_fn();
};

// 命名空间
defineComponent({
  name: "yunweibao-SessionSettings",
});

// -------------------------------------------------------------------
// 安卓回调函数r
const callJSResult = (str) => {
  supportDevice = [];
  sessionInfo.value = [];
  var info = [];
  var info2 = [];
  var cmds = str.split(";")[0];
  let arr1 = [];
  var cmdArr = cmds.split(",").splice(1);
  cmdArr.forEach((item) => {
    var it = item.split("*");
    if (item.indexOf("CIRCLE") !== -1) {
      if (deviceVersion.value <= 11) {
        // 兼容低版本
        if (it[1] != 0) {
          arr1.push("1");
        }
        if (it[2] != 0) {
          arr1.push("2");
        }
      } else {
        // 高版本
        it.filter(function (value, index) {
          if (value != 0 && index != 0) {
            arr1.push(index.toString());
          }
        });
      }
      coverInfoChecked.value = [...arr1];
      coverInfo.value = it;
    } else {
      supportDevice.push(it[0]);
      it[3] = "";
      if (it[1] != 0) {
        it[3] = "1";
      } else if (it[2] != 0) {
        it[3] = "2";
      } else {
        it[3] = "-1";
      }
      info.push([it[0], it[3]]);
      info2.push(it[3]);
    }
  });
  sessionInfo.value = info;
  sessionInfoChecked.value = info2;
};

// 向安卓发送指令
const androidStatus_fn = () => {
  getDeviceVersion((msg) => {
    deviceVersion.value = parseInt(msg);
  });
};
androidStatus_fn();

onMounted(() => {
  postAN.ANSend("$STORAGE");
  window.callJSResult = callJSResult;
  window.callJSResult_Status = callJSResult_Status;
});
</script>

<style scoped>
.cell-group {
  margin: 10px;
}
.checkbox {
  margin-top: 0px;
  margin-bottom: 15px;
}
.trInfo {
  width: 30vh;
  text-align: center;
  height: 30px;
}
</style>