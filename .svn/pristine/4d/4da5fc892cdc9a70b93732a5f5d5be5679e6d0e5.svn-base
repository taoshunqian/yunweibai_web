import {columnsCheckbits, columnCom } from './ConfigConst';


//解码
function b64Decode(str) {
  return decodeURI(decodeURIComponent(atob(str)));
}

export function getQueryString2(name) {
  var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
  var r = window.location.href.substr(1).match(reg);
  if (name == "pass") {
    var pass = b64Decode(r[2]);
    if (r != null) return pass;
    return null;
  } else {
    if (r != null) return decodeURI(r[2]);
    return null;
  }
}

// 生产模式
export function getQueryString(name) {
  var url = window.location.href;
  if(url.indexOf("?")!=-1){
    var str = url.split("?")[1];
    var obj = {};
    var items = str.split("&");
    for (var i = 0; i < items.length; i++) {
      var item = items[i].split("=");
      obj[item[0]] = item[1]
    }
    return obj[name];
  }else{
    return "";
  }
}


export function getWifiASC(nameWifi) {
  let wifiTemp = "";
  if (nameWifi != null && nameWifi.length >= 3) {
    for (let i = 0; i < nameWifi.length / 3; i++) {
      wifiTemp += String.fromCharCode(nameWifi.substr(i * 3, 3));
    }
  }
  return wifiTemp;
}


// 转ASCII
export function getWifiASCFormat(nameWifi) {
  let wifiTemp = "";

  for (let i = 0; i < nameWifi.length; i++) {
    wifiTemp += PrefixInteger(nameWifi[i].charCodeAt(), 3);
  }

  return wifiTemp;
}
function PrefixInteger(num, m) {
  return (Array(m).join(0) + num).slice(-m);
}

// 互换 位置
export function arrIndexExchange(array, x, y) {
  array.splice(x - 1, 1, ...array.splice(y - 1, 1, array[x - 1]))
  return array
}

// 十进制转二进制 8位
export const baseChange = (value, max = 8) => {
  var number = +value;
  var num = pad(number.toString(2), max);
  var strArr = num.split("");
  return strArr;
};

export function pad(num, n) {
  return Array(n > num ? (n - ('' + num).length + 1) : 0).join(0) + num;
}


// 保留小数
export function keepDecimal(str , num) {
  return str.substr(0,str.indexOf(".")+num);
}


export const filterABtn = (num) => {
  var str = "";
  function PtzBtn(num) {
    switch (num) {
      case "0":
        str = columnsCheckbits[0];
        break;
      case "1":
        str = columnsCheckbits[1];
        break;
      case "2":
        str = columnsCheckbits[2];
        break;
    }
    return str;
  }
  switch (num) {
    case "78":
      str = columnsCheckbits[0];
      break;
    case "79":
      str = columnsCheckbits[1];
      break;
    case "69":
      str = columnsCheckbits[2];
      break;
    default:
      str = PtzBtn(num);
  }
  return str;
};

export function columnComInfo() {
  const columnIndex = columnCom;
  return columnIndex;
}


// 十进制转二进制 8位
export const baseChangeAlarm = (value, max = 8) => {
  var leng = value.length;
  var number = max - leng;
  var str = "";
  for (var i = 0; i < number; i++) {
    str += "0";
  }
  str += value;
  var select = str.split("").reverse();
  var selectItem = [];
  for (var j = 0; j < select.length; j++) {
    if (select[j] != "0") {
      selectItem.push(j + 1);
    }
  }
  return selectItem;
};
// 二进制转十进制
export const byteChange = (value, max = 8) => {
  var str = "";
  console.log(value)
  for (var i = 0; i < max; i++) {
    if (value.indexOf(i) == -1) {
      str += "0";
    } else {
      str += "1";
    }
  }
  var btn = str.split("").reverse().join("");
  if(btn.length < 8) {
    var leng = 8 - btn.length;
    var str2 = "0";
    btn = str2.repeat(leng) + btn;
  }
  var val = parseInt(btn, 2)
  return val;
};

// 二进制转十进制
export const byteChangeAlarm = (value) => {
  // console.warn(value.toString());
  var arr = new Array(9);
  var str = "";
  for (var i = 1; i < arr.length; i++) {
    if (value.indexOf(i) === -1) {
      str += "0";
    } else {
      str += "1";
    }
  }
  var val = parseInt(str.split("").reverse().join(""), 2)
  return val;
};


