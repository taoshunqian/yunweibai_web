<template>
  <TabHeaders :navTitle="navTitle" :leftArrow="false" :lavelMuch="true" />

  <!-- <div>
    <div v-for="(item,index) in 10" :key="index">
      <p v-if="index < 5">555</p>
      <p v-else>{{ index }}</p>
    </div>
  </div> -->

  <CellGroup inset style="margin: 10px">
    <Image width="100%" height="40vh" :src="image" />
  </CellGroup>

  <CellGroup inset style="margin: 10px">
    <Cell :title="$t('cameraInfo.title[0]')">
      <template #right-icon>
        <Checkbox
          v-model="checked"
          :disabled="StateDisabled"
          shape="square"
          icon-size="15px"
          @change="checkBoxChange"
        ></Checkbox>
      </template>
    </Cell>
  </CellGroup>

  <CellGroup inset style="margin: 10px">
    <Cell
      :title="$t('cameraInfo.title[1]')"
      is-link
      :value="deviceCamera"
      @click="showPickerFn"
    />
  </CellGroup>

  <CellGroup inset style="margin: 10px">
    <Cell :title="$t('cameraInfo.title[2]')">
      <template #right-icon>
        <Checkbox v-model="checked2" shape="square" icon-size="15px"></Checkbox>
      </template>
    </Cell>
  </CellGroup>

  <CellGroup inset style="margin: 10px">
    <Cell :title="$t('cameraInfo.title[3]')">
      <template #right-icon>
        <Checkbox v-model="checked3" shape="square" icon-size="15px"></Checkbox>
      </template>
    </Cell>
  </CellGroup>

  <Popup round v-model:show="showPicker" position="bottom">
    <Picker
      :title="$t('cameraInfo.title[4]')"
      :columns="columns"
      @cancel="showPicker = false"
      :default-index="deviceColorIndex"
      :confirm-button-text="$t('picker[0]')"
      :cancel-button-text="$t('picker[1]')"
      @confirm="onConfirm"
    />
  </Popup>

  <StickyBottom @BottomSubmit="BottomSubmit" @BottomSearch="BottomSearch" />
</template>

<script setup>
import { CellGroup, Cell, Checkbox, Toast, Image, Popup, Picker } from "vant"; // Checkbox
import { defineComponent, ref, onMounted } from "vue";

import mixins from '../mixins/index.js'
let {  t, postAN, TabHeaders,StickyBottom,useRoute,callJSResult_Status}= mixins();


let route = useRoute();
const query = route.query;
const index = +query.index;
let item = query.e;
let allCmd = query.allCmd;
let nowCmd = query.nowCmd;

// console.log(allCmd.split(",")[0])

// 标题
const navTitle = ref(
  t("cameraInfo.navTitle[0]") + (index + 1) + t("cameraInfo.navTitle[1]")
);
const defineColumns = [
  "960H",
  "720P",
  "1080P",
  "TVI 720P",
  "TVI 1080P",
  "CVI 720P",
  "CVI 1080P",
  "960P",
];
// 2 4 6 1
let testArr = [
  [1, 3],
  [2, 4],
]
  .join("!")
  .replace(/,/g, "*");
console.log(testArr.replace(/!/g, ","));

const columns = ref([]);
const checked = ref(1); // 启用
const checked2 = ref(1); // 水平
const checked3 = ref(1); // 垂直
const StateDisabled = ref(true);
const deviceColorIndex = ref(1);
const showPicker = ref(false); // 弹出层是否显示
const deviceCamera = ref("");
const image = ref("");
const mirrorCmd = ref(""); // 镜像设置指令
var cameraItems = [];

// 设置选中的分辨率
const onConfirm = (e) => {
  deviceColorIndex.value = columns.value.indexOf(e);
  deviceCamera.value = e;
  showPicker.value = false;
};

const showPickerFn = () => {
  if (StateDisabled.value) {
    Toast(t("toast[3]"));
    return false;
  }
  showPicker.value = true;
};

// 是否启用
const checkBoxChange = (e) => {
  var bool = e;
  if (bool) {
    if (deviceCamera.value == "" || deviceCamera.value == undefined) {
      deviceCamera.value = cameraItems[0]; // 获取到当前选择的分辨率
    }
  }
};

// 保存
const BottomSubmit = () => {
  var cmds = [];

  for (var i = 0; i < allCmd.length; i++) {
    if (i > 0) {
      var item = allCmd[i].split(":")[0];
      var cmd = item.split("#");
      cmds.push(cmd);
    }
  }

  // 获取到分辨率，在分辨率==0时为不启用
  if (deviceCamera.value != "") {
    var selectCamera = defineColumns.indexOf(deviceCamera.value);
    // console.warn(+checked.value)
    cmds[index][1] = +checked.value == 0 ? 0 : selectCamera + 1; // 不是是数组的索引，因此需要 +1，才是真正的值
  }

  let replaceCmd = cmds.join("!").replace(/,/g, "*").replace(/!/g, ",");
  let Cmd = replaceCmd.split(",");

  var powerCmd = [];
  for (var j = 0; j < Cmd.length; j++) {
    var powerItem = Cmd[j].split("*")[1];
    powerCmd.push(powerItem);
  }
  let resCmd = nowCmd + "," + allCmd[0] + "," + powerCmd.toString(); // 获取到摄像头设置的指令
  console.log(resCmd);

  // 镜像设置
  let mirror = mirrorCmd.value.split(",");
  var nowMirror = mirror[index + 1].split("*");
  nowMirror[1] = +checked2.value;
  nowMirror[2] = +checked3.value;
  nowMirror.join(",");
  mirror[index + 1] = nowMirror;
  var cmdsMirror = mirror.join("!").replace(/,/g, "*").replace(/!/g, ",");
  // console.log(cmdsMirror); // 获取到镜像设置
  postAN.ANsendSetting(cmdsMirror); // 镜像设置
  postAN.ANsendSetting(resCmd); // 摄像头设置
  return false;
};
// 查询
const BottomSearch = () => {
  Toast(t("toast[0]"));
  androidStatus_fn();
};

// 解析出支持设置的分辨率
const splitStr = () => {
  var itemArr = item.split("#"); // 获取到是否启用
  console.warn(item);

  var cameraArr = itemArr[1].split(":"); // 分辨率

  console.warn("分辨率: " + cameraArr[0]);
  if (cameraArr[0] == 0) {
    checked.value = !!+cameraArr[0]; // 启用
  }else {
    checked.value = true;
  }
  // alert(cameraArr[0]);
  deviceCamera.value = defineColumns[cameraArr[0] - 1]; // 获取到当前选择的分辨率
  var cameraArr2 = cameraArr[1].split("*");

  for (var j = 0; j < cameraArr2.length; j++) {
    cameraItems.push(defineColumns[cameraArr2[j] - 1]);
  }
  columns.value = [...new Set(cameraItems)]; // 显示 支持设置的分辨率
  deviceColorIndex.value = cameraItems.indexOf(deviceCamera.value); // 获取到分辨率的索引
  StateDisabled.value = false;
};

// 命名空间
defineComponent({
  name: "yunweibao-CameraInfo",
});

// -------------------------------------------------------------------
// 安卓回调函数
const callJSResult = (str) => {
  var cmds = str.split(";")[0];

  // 获取摄像头分辨率
  if (cmds.indexOf("CAMERAMODE") !== -1) {
    var cmdArr2 = cmds.split(",").splice(2);
    // console.log(cmds);
    let nowMirror2 = cmdArr2[index];
    item = nowMirror2;
    splitStr();
    postAN.ANSend("$MIRROR");
    return false;
  }

  mirrorCmd.value = cmds;
  // 获取到 镜像设置
  var cmdArr = cmds.split(",").splice(1);
  // alert(cmdArr[index]);
  Toast.clear();
  console.warn(cmdArr);
  let nowMirror = cmdArr[index].split("*");
  checked2.value = +nowMirror[1];
  checked3.value = +nowMirror[2];
  
};
// 安卓图片的回调函数
const callJSResult_IMG = (state, data) => {
  if (state == 0) {
    Toast.success(state + index);
    return false;
  } else {
    image.value = data;
    // console.warn(data);
  }
};


// 向安卓发送指令
const androidStatus_fn = () => {
  Toast.loading({
    forbidClick: true,
    loadingType: "spinner",
    duration: 0,
  });
  setTimeout(() => {
    postAN.ANsendSelectPhoto(index);
  }, 800)
  postAN.ANSend("$CAMERAMODE");
  
};

onMounted(() => {
  window.callJSResult = callJSResult;
  window.callJSResult_Status = callJSResult_Status;
  window.callJSResult_IMG = callJSResult_IMG;
  androidStatus_fn();
  splitStr();
});
</script>

<style>
.images {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  /* background: red; */
  width: 93%;
  margin: auto;
}
</style>
